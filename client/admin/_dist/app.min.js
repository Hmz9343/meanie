'use strict';

(function () {
    'use strict';

    config.$inject = ["$locationProvider", "$stateProvider", "$urlRouterProvider"];
    run.$inject = ["$http", "$rootScope", "$window"];
    angular.module('app', ['ui.router']).config(config).run(run);

    function config($locationProvider, $stateProvider, $urlRouterProvider) {
        // default route
        $urlRouterProvider.otherwise("/posts");

        $stateProvider.state('posts', {
            url: '/posts',
            templateUrl: 'posts/index.view.html',
            controller: 'Posts.IndexController',
            controllerAs: 'vm',
            data: { activeTab: 'posts' }
        }).state('posts/add', {
            url: '/posts/add',
            templateUrl: 'posts/add-edit.view.html',
            controller: 'Posts.AddEditController',
            controllerAs: 'vm',
            data: { activeTab: 'posts' }
        }).state('posts/edit', {
            url: '/posts/edit/:_id',
            templateUrl: 'posts/add-edit.view.html',
            controller: 'Posts.AddEditController',
            controllerAs: 'vm',
            data: { activeTab: 'posts' }
        }).state('pages', {
            url: '/pages',
            templateUrl: 'pages/index.view.html',
            controller: 'Pages.IndexController',
            controllerAs: 'vm',
            data: { activeTab: 'pages' }
        }).state('pages/add', {
            url: '/pages/add',
            templateUrl: 'pages/add-edit.view.html',
            controller: 'Pages.AddEditController',
            controllerAs: 'vm',
            data: { activeTab: 'pages' }
        }).state('pages/edit', {
            url: '/pages/edit/:_id',
            templateUrl: 'pages/add-edit.view.html',
            controller: 'Pages.AddEditController',
            controllerAs: 'vm',
            data: { activeTab: 'pages' }
        }).state('redirects', {
            url: '/redirects',
            templateUrl: 'redirects/index.view.html',
            controller: 'Redirects.IndexController',
            controllerAs: 'vm',
            data: { activeTab: 'redirects' }
        }).state('redirects/add', {
            url: '/redirects/add',
            templateUrl: 'redirects/add-edit.view.html',
            controller: 'Redirects.AddEditController',
            controllerAs: 'vm',
            data: { activeTab: 'redirects' }
        }).state('redirects/edit', {
            url: '/redirects/edit/:_id',
            templateUrl: 'redirects/add-edit.view.html',
            controller: 'Redirects.AddEditController',
            controllerAs: 'vm',
            data: { activeTab: 'redirects' }
        }).state('account', {
            url: '/account',
            templateUrl: 'account/index.view.html',
            controller: 'Account.IndexController',
            controllerAs: 'vm',
            data: { activeTab: 'account' }
        }).state('sites', {
            url: '/sites',
            templateUrl: 'sites/index.view.html',
            controller: 'Sites.IndexController',
            controllerAs: 'vm',
            data: { activeTab: 'sites' }
        }).state('sites/add', {
            url: '/sites/add',
            templateUrl: 'sites/add-edit.view.html',
            controller: 'Sites.AddEditController',
            controllerAs: 'vm',
            data: { activeTab: 'sites' }
        }).state('sites/edit', {
            url: '/sites/edit/:_id',
            templateUrl: 'sites/add-edit.view.html',
            controller: 'Sites.AddEditController',
            controllerAs: 'vm',
            data: { activeTab: 'sites' }
        }).state('users', {
            url: '/users',
            templateUrl: 'users/index.view.html',
            controller: 'Users.IndexController',
            controllerAs: 'vm',
            data: { activeTab: 'users' }
        }).state('users/add-edit', {
            url: '/users/{action:add|edit}/:_id',
            params: {
                _id: { squash: true, value: null }
            },
            templateUrl: 'users/add-edit.view.html',
            controller: 'Users.AddEditController',
            controllerAs: 'vm',
            data: { activeTab: 'users' }
        });
    }

    function run($http, $rootScope, $window) {
        // add JWT token as default auth header
        $http.defaults.headers.common['Authorization'] = 'Bearer ' + $window.jwtToken;

        // update active tab on state change
        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
            $rootScope.activeTab = toState.data.activeTab;
        });
    }

    // manually bootstrap angular after the JWT token is retrieved from the server
    $(function () {
        // get JWT token from server
        $.get('/token', function (token) {
            window.jwtToken = token;

            angular.bootstrap(document, ['app']);
        });
    });
})();
'use strict';

(function () {
    'use strict';

    Controller.$inject = ["$window", "UserService", "AlertService"];
    angular.module('app').controller('Account.IndexController', Controller);

    function Controller($window, UserService, AlertService) {
        var vm = this;

        vm.user = null;
        vm.saveUser = saveUser;
        vm.deleteUser = deleteUser;

        initController();

        function initController() {
            // get current user
            UserService.GetCurrent().then(function (user) {
                vm.user = user;
            });
        }

        function saveUser() {
            UserService.Save(vm.user).then(function () {
                AlertService.Success('User saved');
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }

        function deleteUser() {
            UserService.Delete(vm.user._id).then(function () {
                // log user out
                $window.location = '/login';
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Controller.$inject = ["$stateParams", "$location", "$filter", "PageService", "AlertService"];
    angular.module('app').controller('Pages.AddEditController', Controller);

    function Controller($stateParams, $location, $filter, PageService, AlertService) {
        var vm = this;

        vm.page = {};
        vm.savePage = savePage;
        vm.deletePage = deletePage;

        initController();

        function initController() {
            vm.loading = 0;

            if ($stateParams._id) {
                vm.loading += 1;
                PageService.GetById($stateParams._id).then(function (page) {
                    vm.loading -= 1;
                    vm.page = page;
                });
            } else {
                // initialise with defaults
                vm.page = {
                    publish: true
                };
            }
        }

        function savePage() {
            PageService.Save(vm.page).then(function () {
                AlertService.Success('Page saved', true);
                $location.path('/pages');
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }

        function deletePage() {
            PageService.Delete(vm.page._id).then(function () {
                AlertService.Success('Page deleted', true);
                $location.path('/pages');
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Controller.$inject = ["PageService"];
    angular.module('app').controller('Pages.IndexController', Controller);

    function Controller(PageService) {
        var vm = this;

        vm.pages = [];

        initController();

        function initController() {
            vm.loading = true;
            PageService.GetAll().then(function (pages) {
                vm.loading = false;
                vm.pages = pages;
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Controller.$inject = ["$stateParams", "$location", "PostService", "AlertService"];
    angular.module('app').controller('Posts.AddEditController', Controller);

    function Controller($stateParams, $location, PostService, AlertService) {
        var vm = this;

        vm.post = {};
        vm.savePost = savePost;
        vm.deletePost = deletePost;

        initController();

        function initController() {
            vm.loading = 0;

            if ($stateParams._id) {
                vm.loading += 1;
                PostService.GetById($stateParams._id).then(function (post) {
                    vm.loading -= 1;
                    vm.post = post;
                });
            } else {
                // initialise with defaults
                vm.post = {
                    publishDate: moment().format('YYYY-MM-DD'),
                    publish: true
                };
            }
        }

        function savePost() {
            PostService.Save(vm.post).then(function () {
                AlertService.Success('Post saved', true);
                $location.path('/posts');
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }

        function deletePost() {
            PostService.Delete(vm.post._id).then(function () {
                AlertService.Success('Post deleted', true);
                $location.path('/posts');
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Controller.$inject = ["PostService"];
    angular.module('app').controller('Posts.IndexController', Controller);

    function Controller(PostService) {
        var vm = this;

        vm.posts = [];

        initController();

        function initController() {
            vm.loading = true;
            PostService.GetAll().then(function (posts) {
                vm.loading = false;
                vm.posts = posts;
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Controller.$inject = ["$stateParams", "$location", "$filter", "RedirectService", "AlertService"];
    angular.module('app').controller('Redirects.AddEditController', Controller);

    function Controller($stateParams, $location, $filter, RedirectService, AlertService) {
        var vm = this;

        vm.redirect = {};
        vm.saveRedirect = saveRedirect;
        vm.deleteRedirect = deleteRedirect;

        initController();

        function initController() {
            vm.loading = 0;

            if ($stateParams._id) {
                vm.loading += 1;
                RedirectService.GetById($stateParams._id).then(function (redirect) {
                    vm.loading -= 1;
                    vm.redirect = redirect;
                });
            }
        }

        function saveRedirect() {
            RedirectService.Save(vm.redirect).then(function () {
                AlertService.Success('Redirect saved', true);
                $location.path('/redirects');
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }

        function deleteRedirect() {
            RedirectService.Delete(vm.redirect._id).then(function () {
                AlertService.Success('Redirect deleted', true);
                $location.path('/redirects');
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Controller.$inject = ["RedirectService"];
    angular.module('app').controller('Redirects.IndexController', Controller);

    function Controller(RedirectService) {
        var vm = this;

        vm.redirects = [];

        initController();

        function initController() {
            vm.loading = true;
            RedirectService.GetAll().then(function (redirects) {
                vm.loading = false;
                vm.redirects = redirects;
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Controller.$inject = ["$stateParams", "$location", "SiteService", "UserService", "AlertService"];
    angular.module('app').controller('Sites.AddEditController', Controller);

    function Controller($stateParams, $location, SiteService, UserService, AlertService) {
        var vm = this;

        vm.site = {};
        vm.saveSite = saveSite;
        vm.deleteSite = deleteSite;
        vm.searchUsers = searchUsers;
        vm.addUser = addUser;
        vm.removeUser = removeUser;
        vm.addDomain = addDomain;
        vm.removeDomain = removeDomain;

        initController();

        function initController() {
            vm.loading = 0;

            if ($stateParams._id) {
                vm.loading += 1;
                SiteService.GetById($stateParams._id).then(function (site) {
                    vm.loading -= 1;
                    vm.site = site;
                });
            }
        }

        function saveSite() {
            SiteService.Save(vm.site).then(function () {
                AlertService.Success('Site saved', true);
                $location.path('/sites');
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }

        function deleteSite() {
            SiteService.Delete(vm.site._id).then(function () {
                AlertService.Success('Site deleted', true);
                $location.path('/sites');
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }

        function searchUsers() {
            if (!vm.userQuery) {
                vm.users = [];
                return;
            }

            UserService.Search(vm.userQuery).then(function (users) {
                vm.users = users;
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }

        function addUser(user) {
            // add user to site
            vm.site.users = vm.site.users || [];
            vm.site.users.push(user);

            // reset search
            vm.userQuery = '';
            vm.users = [];
        }

        function removeUser(user) {
            vm.site.users = vm.site.users.filter(function (x) {
                return x._id !== user._id;
            });
        }

        function addDomain() {
            // add domain to site
            vm.site.domains = vm.site.domains || [];
            vm.site.domains.push(vm.domain);

            // reset domain textbox
            vm.domain = '';
        }

        function removeDomain(domain) {
            vm.site.domains = vm.site.domains.filter(function (x) {
                return x !== domain;
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Controller.$inject = ["SiteService"];
    angular.module('app').controller('Sites.IndexController', Controller);

    function Controller(SiteService) {
        var vm = this;

        vm.sites = [];

        initController();

        function initController() {
            vm.loading = true;
            SiteService.GetAll().then(function (sites) {
                vm.loading = false;
                vm.sites = sites;
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Controller.$inject = ["$stateParams", "$location", "UserService", "SiteService", "AlertService"];
    angular.module('app').controller('Users.AddEditController', Controller);

    function Controller($stateParams, $location, UserService, SiteService, AlertService) {
        var vm = this;

        vm.user = {};
        vm.saveUser = saveUser;
        vm.deleteUser = deleteUser;
        vm.searchSites = searchSites;
        vm.addSite = addSite;
        vm.removeSite = removeSite;

        initController();

        function initController() {
            vm.loading = 0;

            if ($stateParams._id) {
                vm.loading += 1;
                UserService.GetById($stateParams._id).then(function (user) {
                    vm.loading -= 1;
                    vm.user = user;
                });
            }
        }

        function saveUser() {
            UserService.Save(vm.user).then(function () {
                AlertService.Success('User saved', true);
                $location.path('/users');
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }

        function deleteUser() {
            UserService.Delete(vm.user._id).then(function () {
                AlertService.Success('User deleted', true);
                $location.path('/users');
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }

        function searchSites() {
            if (!vm.siteQuery) {
                vm.sites = [];
                return;
            }

            SiteService.Search(vm.siteQuery).then(function (sites) {
                vm.sites = sites;
            }).catch(function (error) {
                AlertService.Error(error);
            });
        }

        function addSite(site) {
            // add user to user
            vm.user.sites = vm.user.sites || [];
            vm.user.sites.push(site);

            // reset search
            vm.siteQuery = '';
            vm.sites = [];
        }

        function removeSite(site) {
            vm.user.sites = vm.user.sites.filter(function (x) {
                return x._id !== site._id;
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Controller.$inject = ["UserService"];
    angular.module('app').controller('Users.IndexController', Controller);

    function Controller(UserService) {
        var vm = this;

        vm.users = [];

        initController();

        function initController() {
            vm.loading = true;
            UserService.GetAll().then(function (users) {
                vm.loading = false;
                vm.users = users;
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Directive.$inject = ["$filter"];
    angular.module('app').directive('datepicker', Directive);

    function Directive($filter) {
        return {
            require: 'ngModel',
            link: function link(scope, element, attr, ngModel) {
                // add class for custom styling
                element.addClass('datepicker');

                // enable jquery ui datepicker
                element.datepicker({ dateFormat: "dd/mm/yy" });

                // convert to dd/mm/yyyy for display
                ngModel.$formatters.push(function (date) {
                    if (!date) return;

                    return moment(date).format('DD/MM/YYYY');
                });

                // convert to yyyy-mm-dd for storage
                ngModel.$parsers.push(function (date) {
                    if (!date) return;

                    return moment(date, 'DD/MM/YYYY').format('YYYY-MM-DD');
                });
            }
        };
    }
})();
'use strict';

(function () {
    'use strict';

    Directive.$inject = ["$filter"];
    angular.module('app').directive('tags', Directive);

    function Directive($filter) {
        return {
            require: 'ngModel',
            link: function link(scope, element, attr, ngModel) {
                // convert to comma separated string for display
                ngModel.$formatters.push(function (tags) {
                    return $filter('csv')(tags);
                });

                // convert to array for storage
                ngModel.$parsers.push(function (tagsString) {
                    var tags = _.map(tagsString.split(','), function (tag) {
                        // trim any extra spaces
                        return tag.trim();
                    });

                    // remove any empty tags
                    tags = _.filter(tags, function (tag) {
                        return tag;
                    });

                    return tags;
                });
            }
        };
    }
})();
'use strict';

(function () {
    'use strict';

    Directive.$inject = ["$rootScope"];
    angular.module('app').directive('wysiwyg', Directive);

    function Directive($rootScope) {
        return {
            require: 'ngModel',
            link: function link(scope, element, attr, ngModel) {
                var editorOptions;
                if (attr.wysiwyg === 'minimal') {
                    // minimal editor
                    editorOptions = {
                        height: 100,
                        toolbar: [{ name: 'basic', items: ['Bold', 'Italic', 'Underline'] }, { name: 'links', items: ['Link', 'Unlink'] }, { name: 'tools', items: ['Maximize'] }, { name: 'document', items: ['Source'] }],
                        removePlugins: 'elementspath',
                        resize_enabled: false,
                        allowedContent: true
                    };
                } else {
                    // regular editor
                    editorOptions = {
                        filebrowserImageUploadUrl: '/admin/upload',
                        removeButtons: 'About,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,Save,CreateDiv,Language,BidiLtr,BidiRtl,Flash,Iframe,addFile,Styles',
                        allowedContent: true
                    };
                }

                // enable ckeditor
                var ckeditor = element.ckeditor(editorOptions);

                // update ngModel on change
                ckeditor.editor.on('change', function () {
                    ngModel.$setViewValue(this.getData());
                });
            }
        };
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('app').filter('csv', Filter);

    function Filter() {
        return function (array) {
            if (!array) return;

            return array.toString().replace(/,/g, ', ');
        };
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('app').filter('slugify', Filter);

    function Filter() {
        return function (input) {
            if (!input) return;

            // make lower case and trim
            var slug = input.toLowerCase().trim();

            // replace invalid chars with spaces
            slug = slug.replace(/[^a-z0-9\s-]/g, ' ');

            // replace multiple spaces or hyphens with a single hyphen
            slug = slug.replace(/[\s-]+/g, '-');

            return slug;
        };
    }
})();
'use strict';

(function () {
    'use strict';

    Service.$inject = ["$rootScope"];
    angular.module('app').factory('AlertService', Service);

    function Service($rootScope) {
        var service = {};

        service.Success = Success;
        service.Error = Error;

        initService();

        return service;

        function initService() {
            $rootScope.$on('$locationChangeStart', function () {
                clearFlashMessage();
            });

            function clearFlashMessage() {
                var flash = $rootScope.flash;
                if (flash) {
                    if (!flash.keepAfterLocationChange) {
                        delete $rootScope.flash;
                    } else {
                        // only keep for a single location change
                        flash.keepAfterLocationChange = false;
                    }
                }
            }
        }

        function Success(message, keepAfterLocationChange) {
            $rootScope.flash = {
                message: message,
                type: 'success',
                keepAfterLocationChange: keepAfterLocationChange
            };
        }

        function Error(message, keepAfterLocationChange) {
            $rootScope.flash = {
                message: message,
                type: 'danger',
                keepAfterLocationChange: keepAfterLocationChange
            };
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Service.$inject = ["$http", "$q"];
    angular.module('app').factory('DataService', Service);

    // generic data service to be used as base for other entity services
    function Service($http, $q) {
        return function (endPoint) {
            this.GetAll = GetAll;
            this.GetById = GetById;
            this.Save = Save;
            this.Delete = Delete;
            this.AddMethod = AddMethod;

            function GetAll() {
                return $http.get(endPoint).then(handleSuccess, handleError);
            }

            function GetById(id) {
                return $http.get(endPoint + '/' + id).then(handleSuccess, handleError);
            }

            function Save(entity) {
                if (entity._id) {
                    // update
                    return $http.put(endPoint + '/' + entity._id, entity).then(handleSuccess, handleError);
                } else {
                    // create
                    return $http.post(endPoint, entity).then(handleSuccess, handleError);
                }
            }

            function Delete(id) {
                return $http.delete(endPoint + '/' + id).then(handleSuccess, handleError);
            }

            function AddMethod(name, fn) {
                this[name] = function () {
                    return fn.apply(this, arguments).then(handleSuccess, handleError);
                };
            }
        };

        // private functions

        function handleSuccess(res) {
            return res.data;
        }

        function handleError(res) {
            var error = res.data && res.data.Message ? res.data.Message : res.data;
            return $q.reject(error);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Service.$inject = ["DataService"];
    angular.module('app').factory('PageService', Service);

    function Service(DataService) {
        var service = new DataService('/api/pages');
        return service;
    }
})();
'use strict';

(function () {
    'use strict';

    Service.$inject = ["DataService"];
    angular.module('app').factory('PostService', Service);

    function Service(DataService) {
        var service = new DataService('/api/posts');
        return service;
    }
})();
'use strict';

(function () {
    'use strict';

    Service.$inject = ["DataService"];
    angular.module('app').factory('RedirectService', Service);

    function Service(DataService) {
        var service = new DataService('/api/redirects');
        return service;
    }
})();
'use strict';

(function () {
    'use strict';

    Service.$inject = ["$http", "DataService"];
    angular.module('app').factory('SiteService', Service);

    function Service($http, DataService) {
        var service = new DataService('/api/sites');

        service.AddMethod('Search', Search);

        return service;

        function Search(query) {
            query = query || '';
            return $http.get('/api/sites/search?q=' + query);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    Service.$inject = ["$http", "DataService"];
    angular.module('app').factory('UserService', Service);

    function Service($http, DataService) {
        var service = new DataService('/api/users');

        service.AddMethod('GetCurrent', GetCurrent);
        service.AddMethod('Search', Search);

        return service;

        function GetCurrent() {
            return $http.get('/api/users/current');
        }

        function Search(query) {
            query = query || '';
            return $http.get('/api/users/search?q=' + query);
        }
    }
})();